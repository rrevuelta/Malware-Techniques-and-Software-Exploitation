#include <Windows.h>
#include <stdio.h>
#include <string.h>

int HookedGetCurrentProcessId() {
	return 0;
}

BOOL APIENTRY DllMain(HINSTANCE hInstance, DWORD fdwReason, LPVOID lpReserved)
{
	DWORD oldPermissions;

	//Locate Import Table.
	DWORD baseAddress = (DWORD)GetModuleHandle(NULL);
	IMAGE_DOS_HEADER* dosHeader = (IMAGE_DOS_HEADER*)baseAddress;
	IMAGE_NT_HEADERS* peHeader = (IMAGE_NT_HEADERS*)((DWORD)baseAddress + (*dosHeader).e_lfanew);
	IMAGE_OPTIONAL_HEADER32 optionalHeader = (IMAGE_OPTIONAL_HEADER32)(*peHeader).OptionalHeader;
	IMAGE_DATA_DIRECTORY importTableDescriptor = optionalHeader.DataDirectory[IMAGE_DIRECTORY_ENTRY_IMPORT];
	IMAGE_IMPORT_DESCRIPTOR* importTable = (IMAGE_IMPORT_DESCRIPTOR*)((DWORD)baseAddress + importTableDescriptor.VirtualAddress);

	int index = 0;

	while (importTable[index].Characteristics != 0) {

		char* importedDllName;
		importedDllName = (char*)importTable[index].Name + (DWORD)baseAddress;

		if (strcmp(importedDllName, "KERNEL32.dll") == 0) {

			//IMPORT NAME TABLE
			IMAGE_THUNK_DATA* thunkINT = (IMAGE_THUNK_DATA*)((DWORD)importTable[index].OriginalFirstThunk + (DWORD)baseAddress);
			//IMPORT ADDRESS TABLE
			IMAGE_THUNK_DATA* thunkIAT = (IMAGE_THUNK_DATA*)((DWORD)importTable[index].FirstThunk + (DWORD)baseAddress);

			int thunkIndex = 0;
			//Loop over IMAGE_THUNK_DATA elements of INT and IAT looking for GetCurrentProcessId function name and address
			while (thunkINT[thunkIndex].u1.AddressOfData != 0) {

				//Looking for the function name in the Import Name Table
				IMAGE_IMPORT_BY_NAME* nameData = (IMAGE_IMPORT_BY_NAME*)thunkINT[thunkIndex].u1.AddressOfData;
				nameData = (IMAGE_IMPORT_BY_NAME*)((DWORD)nameData + (DWORD)baseAddress);
				char* importedFunctionName = (*nameData).Name;

				if (strcmp(importedFunctionName, "GetCurrentProcessId") == 0) {
					//Replace GetCiurrentProcessId function address with our custom function.
					VirtualProtect(&thunkIAT[thunkIndex].u1.Function, 4, PAGE_READWRITE, &oldPermissions);
					thunkIAT[thunkIndex].u1.Function = (DWORD)HookedGetCurrentProcessId;
					VirtualProtect(&thunkIAT[thunkIndex].u1.Function, 4, oldPermissions, &oldPermissions);
				}

				thunkIndex++;
			}
		}
		index++;
	}

	return true;
}



